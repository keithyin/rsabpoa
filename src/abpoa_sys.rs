/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type SIMDi = __m128i;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_res_t {
    pub n_cigar: ::std::os::raw::c_int,
    pub m_cigar: ::std::os::raw::c_int,
    pub graph_cigar: *mut u64,
    pub node_s: ::std::os::raw::c_int,
    pub node_e: ::std::os::raw::c_int,
    pub query_s: ::std::os::raw::c_int,
    pub query_e: ::std::os::raw::c_int,
    pub n_aln_bases: ::std::os::raw::c_int,
    pub n_matched_bases: ::std::os::raw::c_int,
    pub best_score: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_res_t"][::std::mem::size_of::<abpoa_res_t>() - 48usize];
    ["Alignment of abpoa_res_t"][::std::mem::align_of::<abpoa_res_t>() - 8usize];
    ["Offset of field: abpoa_res_t::n_cigar"]
        [::std::mem::offset_of!(abpoa_res_t, n_cigar) - 0usize];
    ["Offset of field: abpoa_res_t::m_cigar"]
        [::std::mem::offset_of!(abpoa_res_t, m_cigar) - 4usize];
    ["Offset of field: abpoa_res_t::graph_cigar"]
        [::std::mem::offset_of!(abpoa_res_t, graph_cigar) - 8usize];
    ["Offset of field: abpoa_res_t::node_s"][::std::mem::offset_of!(abpoa_res_t, node_s) - 16usize];
    ["Offset of field: abpoa_res_t::node_e"][::std::mem::offset_of!(abpoa_res_t, node_e) - 20usize];
    ["Offset of field: abpoa_res_t::query_s"]
        [::std::mem::offset_of!(abpoa_res_t, query_s) - 24usize];
    ["Offset of field: abpoa_res_t::query_e"]
        [::std::mem::offset_of!(abpoa_res_t, query_e) - 28usize];
    ["Offset of field: abpoa_res_t::n_aln_bases"]
        [::std::mem::offset_of!(abpoa_res_t, n_aln_bases) - 32usize];
    ["Offset of field: abpoa_res_t::n_matched_bases"]
        [::std::mem::offset_of!(abpoa_res_t, n_matched_bases) - 36usize];
    ["Offset of field: abpoa_res_t::best_score"]
        [::std::mem::offset_of!(abpoa_res_t, best_score) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_para_t {
    pub m: ::std::os::raw::c_int,
    pub mat: *mut ::std::os::raw::c_int,
    pub mat_fn: *mut ::std::os::raw::c_char,
    pub use_score_matrix: ::std::os::raw::c_int,
    pub match_: ::std::os::raw::c_int,
    pub max_mat: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub min_mis: ::std::os::raw::c_int,
    pub gap_open1: ::std::os::raw::c_int,
    pub gap_open2: ::std::os::raw::c_int,
    pub gap_ext1: ::std::os::raw::c_int,
    pub gap_ext2: ::std::os::raw::c_int,
    pub inf_min: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub min_w: ::std::os::raw::c_int,
    pub wb: ::std::os::raw::c_int,
    pub wf: f32,
    pub zdrop: ::std::os::raw::c_int,
    pub end_bonus: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub incr_fn: *mut ::std::os::raw::c_char,
    pub out_pog: *mut ::std::os::raw::c_char,
    pub align_mode: ::std::os::raw::c_int,
    pub gap_mode: ::std::os::raw::c_int,
    pub max_n_cons: ::std::os::raw::c_int,
    pub cons_algrm: ::std::os::raw::c_int,
    pub min_freq: f64,
    pub verbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_para_t"][::std::mem::size_of::<abpoa_para_t>() - 144usize];
    ["Alignment of abpoa_para_t"][::std::mem::align_of::<abpoa_para_t>() - 8usize];
    ["Offset of field: abpoa_para_t::m"][::std::mem::offset_of!(abpoa_para_t, m) - 0usize];
    ["Offset of field: abpoa_para_t::mat"][::std::mem::offset_of!(abpoa_para_t, mat) - 8usize];
    ["Offset of field: abpoa_para_t::mat_fn"]
        [::std::mem::offset_of!(abpoa_para_t, mat_fn) - 16usize];
    ["Offset of field: abpoa_para_t::use_score_matrix"]
        [::std::mem::offset_of!(abpoa_para_t, use_score_matrix) - 24usize];
    ["Offset of field: abpoa_para_t::match_"]
        [::std::mem::offset_of!(abpoa_para_t, match_) - 28usize];
    ["Offset of field: abpoa_para_t::max_mat"]
        [::std::mem::offset_of!(abpoa_para_t, max_mat) - 32usize];
    ["Offset of field: abpoa_para_t::mismatch"]
        [::std::mem::offset_of!(abpoa_para_t, mismatch) - 36usize];
    ["Offset of field: abpoa_para_t::min_mis"]
        [::std::mem::offset_of!(abpoa_para_t, min_mis) - 40usize];
    ["Offset of field: abpoa_para_t::gap_open1"]
        [::std::mem::offset_of!(abpoa_para_t, gap_open1) - 44usize];
    ["Offset of field: abpoa_para_t::gap_open2"]
        [::std::mem::offset_of!(abpoa_para_t, gap_open2) - 48usize];
    ["Offset of field: abpoa_para_t::gap_ext1"]
        [::std::mem::offset_of!(abpoa_para_t, gap_ext1) - 52usize];
    ["Offset of field: abpoa_para_t::gap_ext2"]
        [::std::mem::offset_of!(abpoa_para_t, gap_ext2) - 56usize];
    ["Offset of field: abpoa_para_t::inf_min"]
        [::std::mem::offset_of!(abpoa_para_t, inf_min) - 60usize];
    ["Offset of field: abpoa_para_t::k"][::std::mem::offset_of!(abpoa_para_t, k) - 64usize];
    ["Offset of field: abpoa_para_t::w"][::std::mem::offset_of!(abpoa_para_t, w) - 68usize];
    ["Offset of field: abpoa_para_t::min_w"][::std::mem::offset_of!(abpoa_para_t, min_w) - 72usize];
    ["Offset of field: abpoa_para_t::wb"][::std::mem::offset_of!(abpoa_para_t, wb) - 76usize];
    ["Offset of field: abpoa_para_t::wf"][::std::mem::offset_of!(abpoa_para_t, wf) - 80usize];
    ["Offset of field: abpoa_para_t::zdrop"][::std::mem::offset_of!(abpoa_para_t, zdrop) - 84usize];
    ["Offset of field: abpoa_para_t::end_bonus"]
        [::std::mem::offset_of!(abpoa_para_t, end_bonus) - 88usize];
    ["Offset of field: abpoa_para_t::incr_fn"]
        [::std::mem::offset_of!(abpoa_para_t, incr_fn) - 96usize];
    ["Offset of field: abpoa_para_t::out_pog"]
        [::std::mem::offset_of!(abpoa_para_t, out_pog) - 104usize];
    ["Offset of field: abpoa_para_t::align_mode"]
        [::std::mem::offset_of!(abpoa_para_t, align_mode) - 112usize];
    ["Offset of field: abpoa_para_t::gap_mode"]
        [::std::mem::offset_of!(abpoa_para_t, gap_mode) - 116usize];
    ["Offset of field: abpoa_para_t::max_n_cons"]
        [::std::mem::offset_of!(abpoa_para_t, max_n_cons) - 120usize];
    ["Offset of field: abpoa_para_t::cons_algrm"]
        [::std::mem::offset_of!(abpoa_para_t, cons_algrm) - 124usize];
    ["Offset of field: abpoa_para_t::min_freq"]
        [::std::mem::offset_of!(abpoa_para_t, min_freq) - 128usize];
    ["Offset of field: abpoa_para_t::verbose"]
        [::std::mem::offset_of!(abpoa_para_t, verbose) - 136usize];
};
impl abpoa_para_t {
    #[inline]
    pub fn ret_cigar(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ret_cigar(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rev_cigar(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rev_cigar(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_msa(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_msa(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_cons(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_cons(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_gfa(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_gfa(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_fq(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_fq(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_read_ids(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_use_read_ids(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn amb_strand(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_amb_strand(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_qv(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_use_qv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_seeding(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disable_seeding(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn progressive_poa(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_progressive_poa(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ret_cigar: u8,
        rev_cigar: u8,
        out_msa: u8,
        out_cons: u8,
        out_gfa: u8,
        out_fq: u8,
        use_read_ids: u8,
        amb_strand: u8,
        use_qv: u8,
        disable_seeding: u8,
        progressive_poa: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ret_cigar: u8 = unsafe { ::std::mem::transmute(ret_cigar) };
            ret_cigar as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rev_cigar: u8 = unsafe { ::std::mem::transmute(rev_cigar) };
            rev_cigar as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let out_msa: u8 = unsafe { ::std::mem::transmute(out_msa) };
            out_msa as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let out_cons: u8 = unsafe { ::std::mem::transmute(out_cons) };
            out_cons as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let out_gfa: u8 = unsafe { ::std::mem::transmute(out_gfa) };
            out_gfa as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let out_fq: u8 = unsafe { ::std::mem::transmute(out_fq) };
            out_fq as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let use_read_ids: u8 = unsafe { ::std::mem::transmute(use_read_ids) };
            use_read_ids as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let amb_strand: u8 = unsafe { ::std::mem::transmute(amb_strand) };
            amb_strand as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let use_qv: u8 = unsafe { ::std::mem::transmute(use_qv) };
            use_qv as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let disable_seeding: u8 = unsafe { ::std::mem::transmute(disable_seeding) };
            disable_seeding as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let progressive_poa: u8 = unsafe { ::std::mem::transmute(progressive_poa) };
            progressive_poa as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_node_t {
    pub node_id: ::std::os::raw::c_int,
    pub in_edge_n: ::std::os::raw::c_int,
    pub in_edge_m: ::std::os::raw::c_int,
    pub in_id: *mut ::std::os::raw::c_int,
    pub out_edge_n: ::std::os::raw::c_int,
    pub out_edge_m: ::std::os::raw::c_int,
    pub out_id: *mut ::std::os::raw::c_int,
    pub out_edge_weight: *mut ::std::os::raw::c_int,
    pub read_weight: *mut ::std::os::raw::c_int,
    pub n_read: ::std::os::raw::c_int,
    pub m_read: ::std::os::raw::c_int,
    pub read_ids: *mut *mut u64,
    pub read_ids_n: ::std::os::raw::c_int,
    pub aligned_node_n: ::std::os::raw::c_int,
    pub aligned_node_m: ::std::os::raw::c_int,
    pub aligned_node_id: *mut ::std::os::raw::c_int,
    pub base: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_node_t"][::std::mem::size_of::<abpoa_node_t>() - 104usize];
    ["Alignment of abpoa_node_t"][::std::mem::align_of::<abpoa_node_t>() - 8usize];
    ["Offset of field: abpoa_node_t::node_id"]
        [::std::mem::offset_of!(abpoa_node_t, node_id) - 0usize];
    ["Offset of field: abpoa_node_t::in_edge_n"]
        [::std::mem::offset_of!(abpoa_node_t, in_edge_n) - 4usize];
    ["Offset of field: abpoa_node_t::in_edge_m"]
        [::std::mem::offset_of!(abpoa_node_t, in_edge_m) - 8usize];
    ["Offset of field: abpoa_node_t::in_id"][::std::mem::offset_of!(abpoa_node_t, in_id) - 16usize];
    ["Offset of field: abpoa_node_t::out_edge_n"]
        [::std::mem::offset_of!(abpoa_node_t, out_edge_n) - 24usize];
    ["Offset of field: abpoa_node_t::out_edge_m"]
        [::std::mem::offset_of!(abpoa_node_t, out_edge_m) - 28usize];
    ["Offset of field: abpoa_node_t::out_id"]
        [::std::mem::offset_of!(abpoa_node_t, out_id) - 32usize];
    ["Offset of field: abpoa_node_t::out_edge_weight"]
        [::std::mem::offset_of!(abpoa_node_t, out_edge_weight) - 40usize];
    ["Offset of field: abpoa_node_t::read_weight"]
        [::std::mem::offset_of!(abpoa_node_t, read_weight) - 48usize];
    ["Offset of field: abpoa_node_t::n_read"]
        [::std::mem::offset_of!(abpoa_node_t, n_read) - 56usize];
    ["Offset of field: abpoa_node_t::m_read"]
        [::std::mem::offset_of!(abpoa_node_t, m_read) - 60usize];
    ["Offset of field: abpoa_node_t::read_ids"]
        [::std::mem::offset_of!(abpoa_node_t, read_ids) - 64usize];
    ["Offset of field: abpoa_node_t::read_ids_n"]
        [::std::mem::offset_of!(abpoa_node_t, read_ids_n) - 72usize];
    ["Offset of field: abpoa_node_t::aligned_node_n"]
        [::std::mem::offset_of!(abpoa_node_t, aligned_node_n) - 76usize];
    ["Offset of field: abpoa_node_t::aligned_node_m"]
        [::std::mem::offset_of!(abpoa_node_t, aligned_node_m) - 80usize];
    ["Offset of field: abpoa_node_t::aligned_node_id"]
        [::std::mem::offset_of!(abpoa_node_t, aligned_node_id) - 88usize];
    ["Offset of field: abpoa_node_t::base"][::std::mem::offset_of!(abpoa_node_t, base) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_graph_t {
    pub node: *mut abpoa_node_t,
    pub node_n: ::std::os::raw::c_int,
    pub node_m: ::std::os::raw::c_int,
    pub index_rank_m: ::std::os::raw::c_int,
    pub index_to_node_id: *mut ::std::os::raw::c_int,
    pub node_id_to_index: *mut ::std::os::raw::c_int,
    pub node_id_to_max_pos_left: *mut ::std::os::raw::c_int,
    pub node_id_to_max_pos_right: *mut ::std::os::raw::c_int,
    pub node_id_to_max_remain: *mut ::std::os::raw::c_int,
    pub node_id_to_msa_rank: *mut ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_graph_t"][::std::mem::size_of::<abpoa_graph_t>() - 80usize];
    ["Alignment of abpoa_graph_t"][::std::mem::align_of::<abpoa_graph_t>() - 8usize];
    ["Offset of field: abpoa_graph_t::node"][::std::mem::offset_of!(abpoa_graph_t, node) - 0usize];
    ["Offset of field: abpoa_graph_t::node_n"]
        [::std::mem::offset_of!(abpoa_graph_t, node_n) - 8usize];
    ["Offset of field: abpoa_graph_t::node_m"]
        [::std::mem::offset_of!(abpoa_graph_t, node_m) - 12usize];
    ["Offset of field: abpoa_graph_t::index_rank_m"]
        [::std::mem::offset_of!(abpoa_graph_t, index_rank_m) - 16usize];
    ["Offset of field: abpoa_graph_t::index_to_node_id"]
        [::std::mem::offset_of!(abpoa_graph_t, index_to_node_id) - 24usize];
    ["Offset of field: abpoa_graph_t::node_id_to_index"]
        [::std::mem::offset_of!(abpoa_graph_t, node_id_to_index) - 32usize];
    ["Offset of field: abpoa_graph_t::node_id_to_max_pos_left"]
        [::std::mem::offset_of!(abpoa_graph_t, node_id_to_max_pos_left) - 40usize];
    ["Offset of field: abpoa_graph_t::node_id_to_max_pos_right"]
        [::std::mem::offset_of!(abpoa_graph_t, node_id_to_max_pos_right) - 48usize];
    ["Offset of field: abpoa_graph_t::node_id_to_max_remain"]
        [::std::mem::offset_of!(abpoa_graph_t, node_id_to_max_remain) - 56usize];
    ["Offset of field: abpoa_graph_t::node_id_to_msa_rank"]
        [::std::mem::offset_of!(abpoa_graph_t, node_id_to_msa_rank) - 64usize];
};
impl abpoa_graph_t {
    #[inline]
    pub fn is_topological_sorted(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_topological_sorted(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_called_cons(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_called_cons(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_set_msa_rank(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_set_msa_rank(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_topological_sorted: u8,
        is_called_cons: u8,
        is_set_msa_rank: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_topological_sorted: u8 = unsafe { ::std::mem::transmute(is_topological_sorted) };
            is_topological_sorted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_called_cons: u8 = unsafe { ::std::mem::transmute(is_called_cons) };
            is_called_cons as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_set_msa_rank: u8 = unsafe { ::std::mem::transmute(is_set_msa_rank) };
            is_set_msa_rank as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_cons_t {
    pub n_cons: ::std::os::raw::c_int,
    pub n_seq: ::std::os::raw::c_int,
    pub msa_len: ::std::os::raw::c_int,
    pub clu_n_seq: *mut ::std::os::raw::c_int,
    pub clu_read_ids: *mut *mut ::std::os::raw::c_int,
    pub cons_len: *mut ::std::os::raw::c_int,
    pub cons_node_ids: *mut *mut ::std::os::raw::c_int,
    pub cons_base: *mut *mut u8,
    pub msa_base: *mut *mut u8,
    pub cons_cov: *mut *mut ::std::os::raw::c_int,
    pub cons_phred_score: *mut *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_cons_t"][::std::mem::size_of::<abpoa_cons_t>() - 80usize];
    ["Alignment of abpoa_cons_t"][::std::mem::align_of::<abpoa_cons_t>() - 8usize];
    ["Offset of field: abpoa_cons_t::n_cons"]
        [::std::mem::offset_of!(abpoa_cons_t, n_cons) - 0usize];
    ["Offset of field: abpoa_cons_t::n_seq"][::std::mem::offset_of!(abpoa_cons_t, n_seq) - 4usize];
    ["Offset of field: abpoa_cons_t::msa_len"]
        [::std::mem::offset_of!(abpoa_cons_t, msa_len) - 8usize];
    ["Offset of field: abpoa_cons_t::clu_n_seq"]
        [::std::mem::offset_of!(abpoa_cons_t, clu_n_seq) - 16usize];
    ["Offset of field: abpoa_cons_t::clu_read_ids"]
        [::std::mem::offset_of!(abpoa_cons_t, clu_read_ids) - 24usize];
    ["Offset of field: abpoa_cons_t::cons_len"]
        [::std::mem::offset_of!(abpoa_cons_t, cons_len) - 32usize];
    ["Offset of field: abpoa_cons_t::cons_node_ids"]
        [::std::mem::offset_of!(abpoa_cons_t, cons_node_ids) - 40usize];
    ["Offset of field: abpoa_cons_t::cons_base"]
        [::std::mem::offset_of!(abpoa_cons_t, cons_base) - 48usize];
    ["Offset of field: abpoa_cons_t::msa_base"]
        [::std::mem::offset_of!(abpoa_cons_t, msa_base) - 56usize];
    ["Offset of field: abpoa_cons_t::cons_cov"]
        [::std::mem::offset_of!(abpoa_cons_t, cons_cov) - 64usize];
    ["Offset of field: abpoa_cons_t::cons_phred_score"]
        [::std::mem::offset_of!(abpoa_cons_t, cons_phred_score) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_str_t {
    pub l: ::std::os::raw::c_int,
    pub m: ::std::os::raw::c_int,
    pub s: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_str_t"][::std::mem::size_of::<abpoa_str_t>() - 16usize];
    ["Alignment of abpoa_str_t"][::std::mem::align_of::<abpoa_str_t>() - 8usize];
    ["Offset of field: abpoa_str_t::l"][::std::mem::offset_of!(abpoa_str_t, l) - 0usize];
    ["Offset of field: abpoa_str_t::m"][::std::mem::offset_of!(abpoa_str_t, m) - 4usize];
    ["Offset of field: abpoa_str_t::s"][::std::mem::offset_of!(abpoa_str_t, s) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_seq_t {
    pub n_seq: ::std::os::raw::c_int,
    pub m_seq: ::std::os::raw::c_int,
    pub seq: *mut abpoa_str_t,
    pub name: *mut abpoa_str_t,
    pub comment: *mut abpoa_str_t,
    pub qual: *mut abpoa_str_t,
    pub is_rc: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_seq_t"][::std::mem::size_of::<abpoa_seq_t>() - 48usize];
    ["Alignment of abpoa_seq_t"][::std::mem::align_of::<abpoa_seq_t>() - 8usize];
    ["Offset of field: abpoa_seq_t::n_seq"][::std::mem::offset_of!(abpoa_seq_t, n_seq) - 0usize];
    ["Offset of field: abpoa_seq_t::m_seq"][::std::mem::offset_of!(abpoa_seq_t, m_seq) - 4usize];
    ["Offset of field: abpoa_seq_t::seq"][::std::mem::offset_of!(abpoa_seq_t, seq) - 8usize];
    ["Offset of field: abpoa_seq_t::name"][::std::mem::offset_of!(abpoa_seq_t, name) - 16usize];
    ["Offset of field: abpoa_seq_t::comment"]
        [::std::mem::offset_of!(abpoa_seq_t, comment) - 24usize];
    ["Offset of field: abpoa_seq_t::qual"][::std::mem::offset_of!(abpoa_seq_t, qual) - 32usize];
    ["Offset of field: abpoa_seq_t::is_rc"][::std::mem::offset_of!(abpoa_seq_t, is_rc) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_simd_matrix_t {
    pub s_mem: *mut SIMDi,
    pub s_msize: u64,
    pub dp_beg: *mut ::std::os::raw::c_int,
    pub dp_end: *mut ::std::os::raw::c_int,
    pub dp_beg_sn: *mut ::std::os::raw::c_int,
    pub dp_end_sn: *mut ::std::os::raw::c_int,
    pub rang_m: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_simd_matrix_t"][::std::mem::size_of::<abpoa_simd_matrix_t>() - 56usize];
    ["Alignment of abpoa_simd_matrix_t"][::std::mem::align_of::<abpoa_simd_matrix_t>() - 8usize];
    ["Offset of field: abpoa_simd_matrix_t::s_mem"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, s_mem) - 0usize];
    ["Offset of field: abpoa_simd_matrix_t::s_msize"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, s_msize) - 8usize];
    ["Offset of field: abpoa_simd_matrix_t::dp_beg"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, dp_beg) - 16usize];
    ["Offset of field: abpoa_simd_matrix_t::dp_end"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, dp_end) - 24usize];
    ["Offset of field: abpoa_simd_matrix_t::dp_beg_sn"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, dp_beg_sn) - 32usize];
    ["Offset of field: abpoa_simd_matrix_t::dp_end_sn"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, dp_end_sn) - 40usize];
    ["Offset of field: abpoa_simd_matrix_t::rang_m"]
        [::std::mem::offset_of!(abpoa_simd_matrix_t, rang_m) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abpoa_t {
    pub abg: *mut abpoa_graph_t,
    pub abs: *mut abpoa_seq_t,
    pub abm: *mut abpoa_simd_matrix_t,
    pub abc: *mut abpoa_cons_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abpoa_t"][::std::mem::size_of::<abpoa_t>() - 32usize];
    ["Alignment of abpoa_t"][::std::mem::align_of::<abpoa_t>() - 8usize];
    ["Offset of field: abpoa_t::abg"][::std::mem::offset_of!(abpoa_t, abg) - 0usize];
    ["Offset of field: abpoa_t::abs"][::std::mem::offset_of!(abpoa_t, abs) - 8usize];
    ["Offset of field: abpoa_t::abm"][::std::mem::offset_of!(abpoa_t, abm) - 16usize];
    ["Offset of field: abpoa_t::abc"][::std::mem::offset_of!(abpoa_t, abc) - 24usize];
};
extern "C" {
    pub fn abpoa_init_para() -> *mut abpoa_para_t;
}
extern "C" {
    pub fn abpoa_set_mat_from_file(abpt: *mut abpoa_para_t, mat_fn: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn abpoa_post_set_para(abpt: *mut abpoa_para_t);
}
extern "C" {
    pub fn abpoa_free_para(abpt: *mut abpoa_para_t);
}
extern "C" {
    pub fn abpoa_init() -> *mut abpoa_t;
}
extern "C" {
    pub fn abpoa_free(ab: *mut abpoa_t);
}
extern "C" {
    pub fn abpoa_msa(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        n_seqs: ::std::os::raw::c_int,
        seq_names: *mut *mut ::std::os::raw::c_char,
        seq_lens: *mut ::std::os::raw::c_int,
        seqs: *mut *mut u8,
        qual_weights: *mut *mut ::std::os::raw::c_int,
        out_fp: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_msa1(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        read_fn: *mut ::std::os::raw::c_char,
        out_fp: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_reset(ab: *mut abpoa_t, abpt: *mut abpoa_para_t, qlen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abpoa_restore_graph(ab: *mut abpoa_t, abpt: *mut abpoa_para_t) -> *mut abpoa_t;
}
extern "C" {
    pub fn abpoa_align_sequence_to_graph(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        query: *mut u8,
        qlen: ::std::os::raw::c_int,
        res: *mut abpoa_res_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_subgraph_nodes(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        inc_beg: ::std::os::raw::c_int,
        inc_end: ::std::os::raw::c_int,
        exc_beg: *mut ::std::os::raw::c_int,
        exc_end: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn abpoa_align_sequence_to_subgraph(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        beg_node_id: ::std::os::raw::c_int,
        end_node_id: ::std::os::raw::c_int,
        query: *mut u8,
        qlen: ::std::os::raw::c_int,
        res: *mut abpoa_res_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_add_graph_node(abg: *mut abpoa_graph_t, base: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_add_graph_edge(
        abg: *mut abpoa_graph_t,
        from_id: ::std::os::raw::c_int,
        to_id: ::std::os::raw::c_int,
        check_edge: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        add_read_id: u8,
        add_read_weight: u8,
        read_id: ::std::os::raw::c_int,
        read_ids_n: ::std::os::raw::c_int,
        tot_read_n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_add_graph_alignment(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        query: *mut u8,
        weight: *mut ::std::os::raw::c_int,
        qlen: ::std::os::raw::c_int,
        qpos_to_node_id: *mut ::std::os::raw::c_int,
        res: abpoa_res_t,
        read_id: ::std::os::raw::c_int,
        tot_read_n: ::std::os::raw::c_int,
        inc_both_ends: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_add_subgraph_alignment(
        ab: *mut abpoa_t,
        abpt: *mut abpoa_para_t,
        beg_node_id: ::std::os::raw::c_int,
        end_node_id: ::std::os::raw::c_int,
        query: *mut u8,
        weight: *mut ::std::os::raw::c_int,
        qlen: ::std::os::raw::c_int,
        qpos_to_node_id: *mut ::std::os::raw::c_int,
        res: abpoa_res_t,
        read_id: ::std::os::raw::c_int,
        tot_read_n: ::std::os::raw::c_int,
        inc_both_ends: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abpoa_BFS_set_node_index(
        abg: *mut abpoa_graph_t,
        src_id: ::std::os::raw::c_int,
        sink_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn abpoa_BFS_set_node_remain(
        abg: *mut abpoa_graph_t,
        src_id: ::std::os::raw::c_int,
        sink_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn abpoa_topological_sort(abg: *mut abpoa_graph_t, abpt: *mut abpoa_para_t);
}
extern "C" {
    pub fn abpoa_generate_consensus(ab: *mut abpoa_t, abpt: *mut abpoa_para_t);
}
extern "C" {
    pub fn abpoa_output_fx_consensus(ab: *mut abpoa_t, abpt: *mut abpoa_para_t, out_fp: *mut FILE);
}
extern "C" {
    pub fn abpoa_generate_rc_msa(ab: *mut abpoa_t, abpt: *mut abpoa_para_t);
}
extern "C" {
    pub fn abpoa_output_rc_msa(ab: *mut abpoa_t, abpt: *mut abpoa_para_t, out_fp: *mut FILE);
}
extern "C" {
    pub fn abpoa_generate_gfa(ab: *mut abpoa_t, abpt: *mut abpoa_para_t, out_fp: *mut FILE);
}
extern "C" {
    pub fn abpoa_output(ab: *mut abpoa_t, abpt: *mut abpoa_para_t, out_fp: *mut FILE);
}
extern "C" {
    pub fn abpoa_dump_pog(ab: *mut abpoa_t, abpt: *mut abpoa_para_t);
}
